// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     hello-world.avsc
 */

package input

import (
	"github.com/actgardner/gogen-avro/compiler"
	"github.com/actgardner/gogen-avro/container"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/vm/types"
	"io"
)

// CSV Profile Input
type In struct {

	// First Name
	Firstname *UnionNullString
}

func NewInWriter(writer io.Writer, codec container.Codec, recordsPerBlock int64) (*container.Writer, error) {
	str := &In{}
	return container.NewWriter(writer, codec, recordsPerBlock, str.Schema())
}

func DeserializeIn(r io.Reader) (*In, error) {
	t := NewIn()

	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	return t, err
}

func NewIn() *In {
	return &In{}
}

func (r *In) Schema() string {
	return "{\"doc\":\"CSV Profile Input\",\"fields\":[{\"default\":null,\"doc\":\"First Name\",\"name\":\"firstname\",\"type\":[\"null\",\"string\"]}],\"name\":\"hello.csv.in\",\"namespace\":\"hello\",\"type\":\"record\"}"
}

func (r *In) SchemaName() string {
	return "hello.csv.in"
}

func (r *In) Serialize(w io.Writer) error {
	return writeIn(r, w)
}

func (_ *In) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *In) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *In) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *In) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *In) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *In) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *In) SetString(v string)   { panic("Unsupported operation") }
func (_ *In) SetUnionElem(v int64) { panic("Unsupported operation") }
func (r *In) Get(i int) types.Field {
	switch i {
	case 0:
		r.Firstname = NewUnionNullString()
		return r.Firstname

	}
	panic("Unknown field index")
}
func (r *In) SetDefault(i int) {
	switch i {
	case 0:
		r.Firstname = NewUnionNullString()

		return

	}
	panic("Unknown field index")
}
func (_ *In) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *In) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *In) Finalize()                        {}

type InReader struct {
	r io.Reader
	p *vm.Program
}

func NewInReader(r io.Reader) (*InReader, error) {
	containerReader, err := container.NewReader(r)
	if err != nil {
		return nil, err
	}

	t := NewIn()
	deser, err := compiler.CompileSchemaBytes([]byte(containerReader.AvroContainerSchema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	return &InReader{
		r: containerReader,
		p: deser,
	}, nil
}

func (r *InReader) Read() (*In, error) {
	t := NewIn()
	err := vm.Eval(r.r, r.p, t)
	return t, err
}
